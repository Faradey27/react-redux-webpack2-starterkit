#! /bin/sh

# Test of gettext facilities in the Objective C language.
# Assumes an fr_FR locale is installed.
# Assumes the following packages are installed: gcc.

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

# Test whether an ObjectiveC compiler is found.
tmpfiles="$tmpfiles hello.m l-objc-hello.${OBJEXT} l-objc-hello${EXEEXT} l-objc-hello.dSYM"
cat <<\EOF > hello.m
#include <stdio.h>
#include <stdlib.h>
int main ()
{
  printf ("Hello world\n");
  exit (0);
}
EOF
${CC} ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -o l-objc-hello hello.m 2>/dev/null \
  || { echo "Skipping test: Objective C compiler not found"
       rm -fr $tmpfiles; exit 77
     }

tmpfiles="$tmpfiles prog.m"
cat <<\EOF > prog.m
#include "config.h"
#include <libintl.h>
#include <locale.h>
#include <stdio.h>
#include <stdlib.h>
#include "xsetenv.h"
#define _(string) gettext (string)

int main (int argc, char *argv[])
{
  int n = atoi (argv[2]);

  xsetenv ("LC_ALL", argv[1], 1);
  if (setlocale (LC_ALL, "") == NULL)
    /* Couldn't set locale.  */
    exit (77);

  textdomain ("prog");
  bindtextdomain ("prog", "l-objc");

  printf (_("'Your command, please?', asked the waiter."));
  printf ("\n");

  printf (ngettext ("a piece of cake", "%d pieces of cake", n), n);
  printf ("\n");

  printf (_("%s is replaced by %s."), "FF", "EUR");
  printf ("\n");

  exit (0);
}
EOF

# Variable needed by LTLIBINTL.
top_builddir=..

tmpfiles="$tmpfiles l-objc-prog.${OBJEXT} l-objc-prog${EXEEXT}"
# Put the -I flags before ${CFLAGS} ${CPPFLAGS}, to make sure that libintl.h
# is found in the build directory, regardless of -I options present in
# ${CFLAGS} or ${CPPFLAGS}.
${LIBTOOL} --quiet --mode=link ${CC} -I.. -I$top_srcdir/gnulib-lib ../gnulib-lib/libgettextlib.la -I../intl ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} -o l-objc-prog prog.m ${LTLIBINTL} \
  || exit 1

tmpfiles="$tmpfiles l-objc-prog.tmp l-objc-prog.pot"
: ${XGETTEXT=xgettext}
${XGETTEXT} -o l-objc-prog.tmp --omit-header --no-location -k_ prog.m
test $? = 0 || { rm -fr $tmpfiles; exit 1; }
LC_ALL=C tr -d '\r' < l-objc-prog.tmp > l-objc-prog.pot
test $? = 0 || { rm -fr $tmpfiles; exit 1; }

tmpfiles="$tmpfiles l-objc-prog.ok"
cat <<EOF > l-objc-prog.ok
#, c-format
msgid "'Your command, please?', asked the waiter."
msgstr ""

#, c-format
msgid "a piece of cake"
msgid_plural "%d pieces of cake"
msgstr[0] ""
msgstr[1] ""

#, c-format
msgid "%s is replaced by %s."
msgstr ""
EOF

: ${DIFF=diff}
${DIFF} l-objc-prog.ok l-objc-prog.pot || exit 1

tmpfiles="$tmpfiles l-objc-fr.po"
cat <<\EOF > l-objc-fr.po
msgid ""
msgstr ""
"Content-Type: text/plain; charset=ISO-8859-1\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#, c-format
msgid "'Your command, please?', asked the waiter."
msgstr "«Votre commande, s'il vous plait», dit le garçon."

# Les gateaux allemands sont les meilleurs du monde.
#, c-format
msgid "a piece of cake"
msgid_plural "%d pieces of cake"
msgstr[0] "un morceau de gateau"
msgstr[1] "%d morceaux de gateau"

# Reverse the arguments.
#, c-format
msgid "%s is replaced by %s."
msgstr "%2$s remplace %1$s."
EOF

tmpfiles="$tmpfiles l-objc-fr.po.tmp l-objc-fr.po.new"
: ${MSGMERGE=msgmerge}
${MSGMERGE} -q -o l-objc-fr.po.tmp l-objc-fr.po l-objc-prog.pot
test $? = 0 || { rm -fr $tmpfiles; exit 1; }
LC_ALL=C tr -d '\r' < l-objc-fr.po.tmp > l-objc-fr.po.new
test $? = 0 || { rm -fr $tmpfiles; exit 1; }

: ${DIFF=diff}
${DIFF} l-objc-fr.po l-objc-fr.po.new || exit 1

tmpfiles="$tmpfiles l-objc"
test -d l-objc || mkdir l-objc
test -d l-objc/fr || mkdir l-objc/fr
test -d l-objc/fr/LC_MESSAGES || mkdir l-objc/fr/LC_MESSAGES

: ${MSGFMT=msgfmt}
${MSGFMT} -o l-objc/fr/LC_MESSAGES/prog.mo l-objc-fr.po

tmpfiles="$tmpfiles l-objc-prog.ok l-objc-prog.oku l-objc-prog.out"
: ${DIFF=diff}
cat <<\EOF > l-objc-prog.ok
«Votre commande, s'il vous plait», dit le garçon.
2 morceaux de gateau
EUR remplace FF.
EOF
cat <<\EOF > l-objc-prog.oku
Â«Votre commande, s'il vous plaitÂ», dit le garÃ§on.
2 morceaux de gateau
EUR remplace FF.
EOF

: ${LOCALE_FR=fr_FR}
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR != none; then
  LANGUAGE= ./l-objc-prog $LOCALE_FR 2 > l-objc-prog.out
  case $? in
    0) ${DIFF} l-objc-prog.ok l-objc-prog.out || exit 1;;
    77) LOCALE_FR=none;;
    *) exit 1;;
  esac
fi
if test $LOCALE_FR_UTF8 != none; then
  LANGUAGE= ./l-objc-prog $LOCALE_FR_UTF8 2 > l-objc-prog.out
  case $? in
    0) ${DIFF} l-objc-prog.oku l-objc-prog.out || exit 1;;
    77) LOCALE_FR_UTF8=none;;
    *) exit 1;;
  esac
fi
if test $LOCALE_FR = none && test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french locale is installed"
  else
    echo "Skipping test: no french locale is supported"
  fi
  rm -fr $tmpfiles; exit 77
fi

rm -fr $tmpfiles

exit 0
